from __future__ import print_function, division
import logging
import pprint
import time
from twisted.internet import reactor, defer

from sllurp.util import monotonic
from sllurp.llrp import LLRPClientFactory

start_time = None

numtags = 0
logger = logging.getLogger(__name__)




def tag_report_cb(llrp_msg):
    """Function to run each time the reader reports seeing tags."""
    global numtags
    tags = llrp_msg.msgdict['RO_ACCESS_REPORT']['TagReportData']
    if len(tags):
        print('saw tag(s): %s', pprint.pformat(tags))
        for tag in tags:
            numtags += tag['TagSeenCount'][0]
    else:
        logger.info('no tags seen')
        return


def main():
    global start_time
    fac = LLRPClientFactory(tag_content_selector={
            'EnableROSpecID': False,
            'EnableSpecIndex': False,
            'EnableInventoryParameterSpecID': False,
            'EnableAntennaID': False,
            'EnableChannelIndex': True,
            'EnablePeakRSSI': False,
            'EnableFirstSeenTimestamp': False,
            'EnableLastSeenTimestamp': True,
            'EnableTagSeenCount': True,
            'EnableAccessSpecID': False
        })

    # tag_report_cb will be called every time the reader sends a TagReport
    # message (i.e., when it has "seen" tags).
    fac.addTagReportCallback(tag_report_cb)

    reactor.connectTCP("10.240.0.35", 5084, fac, timeout=3)

    reactor.run()


if __name__ == "__main__":
    main()